/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mJqpyqbUtzd2VoHjhzzUXf
// Component: Mi9B3aqrV_wJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import Button from "../../Button"; // plasmic-import: y61rLxDNYj2u/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdPassword } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdPassword_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Footer from "../../Footer"; // plasmic-import: hA4FTYmfciht/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: mJqpyqbUtzd2VoHjhzzUXf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: mJqpyqbUtzd2VoHjhzzUXf/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: mJqpyqbUtzd2VoHjhzzUXf/projectcss
import sty from "./PlasmicLogin.module.css"; // plasmic-import: Mi9B3aqrV_wJ/css

import TriangleFilledIcon from "./icons/PlasmicIcon__TriangleFilled"; // plasmic-import: dD1PVKW22kHJ/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: ep15jNBOwX87/icon

createPlasmicElementProxy;

export type PlasmicLogin__VariantMembers = {};
export type PlasmicLogin__VariantsArgs = {};
type VariantPropType = keyof PlasmicLogin__VariantsArgs;
export const PlasmicLogin__VariantProps = new Array<VariantPropType>();

export type PlasmicLogin__ArgsType = {};
type ArgPropType = keyof PlasmicLogin__ArgsType;
export const PlasmicLogin__ArgProps = new Array<ArgPropType>();

export type PlasmicLogin__OverridesType = {
  root?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  columns?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  form2?: Flex__<typeof FormWrapper>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultLoginProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLogin__RenderFunc(props: {
  variants: PlasmicLogin__VariantsArgs;
  args: PlasmicLogin__ArgsType;
  overrides: PlasmicLogin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "from",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.pagePath.split("/")[2];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "variable2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "variable3",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "wrongCreds",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            sty.root
          )}
          dir={"rtl"}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__idxnI
                )}
                component={Link}
                href={"#"}
                platform={"nextjs"}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__o2Cug)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={"https://static1.plasmic.app/nav-logo-placeholder.svg"}
                />
              </PlasmicLink__>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__roAt)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/close.svg"}
              />
            }
            forceOpenMenu={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? true
                : undefined
            }
            itemsGap={8}
            menuItems={
              <div className={classNames(projectcss.all, sty.freeBox__coVDe)}>
                <TriangleFilledIcon
                  className={classNames(projectcss.all, sty.svg___2NZ6M)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yJ1Tx
                  )}
                >
                  {"\u0635\u0641\u062d\u0647 \u0627\u0635\u0644\u06cc"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mRdFy
                  )}
                >
                  {"\u062a\u0645\u0627\u0633 \u0628\u0627 \u0645\u0627"}
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__luHBb)}
                  color={"blue"}
                  shape={"rounded"}
                  size={"compact"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lsWyC
                    )}
                  >
                    {"\u0648\u0631\u0648\u062f"}
                  </div>
                </Button>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__vjAup
                  )}
                  component={Link}
                  href={"https://alandclass.com/contact"}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__someb
                    )}
                  >
                    {"\u062a\u0645\u0627\u0633 \u0628\u0627 \u0645\u0627"}
                  </div>
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__bMrfI
                  )}
                  component={Link}
                  href={"https://alandclass.com/medallists"}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hGr2D
                    )}
                  >
                    {"\u0627\u0641\u062a\u062e\u0627\u0631\u0627\u062a"}
                  </div>
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__fCnus
                  )}
                  component={Link}
                  href={"https://alandclass.com/about-us"}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xut4T
                    )}
                  >
                    {"\u062f\u0631\u0628\u0627\u0631\u0647 \u0645\u0627"}
                  </div>
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__v5EEw
                  )}
                  component={Link}
                  href={"https://alandclass.com/events"}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sObv
                    )}
                  >
                    {"\u0631\u0648\u06cc\u062f\u0627\u062f\u0647\u0627"}
                  </div>
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__pU8V
                  )}
                  component={Link}
                  href={"https://alandclass.com/"}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rxOj
                    )}
                  >
                    {"\u062e\u0627\u0646\u0647"}
                  </div>
                </PlasmicLink__>
              </div>
            }
            openButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__zx90Q)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/menu.svg"}
              />
            }
            responsiveBreakpoint={768}
          />

          <div className={classNames(projectcss.all, sty.freeBox__gzi5)}>
            <div className={classNames(projectcss.all, sty.freeBox__oGPjd)}>
              <TriangleFilledIcon
                className={classNames(projectcss.all, sty.svg__ex17E)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__j2Kgm
                )}
              >
                {"\u0635\u0641\u062d\u0647 \u0627\u0635\u0644\u06cc"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__utCwb
                )}
              >
                {"\u062a\u0645\u0627\u0633 \u0628\u0627 \u0645\u0627"}
              </div>
              <Button
                className={classNames("__wab_instance", sty.button__aBXsc)}
                color={"blue"}
                shape={"rounded"}
                size={"compact"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__we9Cu
                  )}
                >
                  {"\u0648\u0631\u0648\u062f"}
                </div>
              </Button>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__d6Ux4
                )}
                component={Link}
                href={"https://alandclass.com/contact"}
                platform={"nextjs"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dCLZ
                  )}
                >
                  {"\u062a\u0645\u0627\u0633 \u0628\u0627 \u0645\u0627"}
                </div>
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__mVgah
                )}
                component={Link}
                href={"https://alandclass.com/medallists"}
                platform={"nextjs"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mi0M
                  )}
                >
                  {"\u0627\u0641\u062a\u062e\u0627\u0631\u0627\u062a"}
                </div>
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__gEAjC
                )}
                component={Link}
                href={"https://alandclass.com/about-us"}
                platform={"nextjs"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lEbgI
                  )}
                >
                  {"\u062f\u0631\u0628\u0627\u0631\u0647 \u0645\u0627"}
                </div>
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__u8Gs
                )}
                component={Link}
                href={"https://alandclass.com/events"}
                platform={"nextjs"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lccA
                  )}
                >
                  {"\u0631\u0648\u06cc\u062f\u0627\u062f\u0647\u0627"}
                </div>
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__eaL49
                )}
                component={Link}
                href={"https://alandclass.com/"}
                platform={"nextjs"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mU9Yu
                  )}
                >
                  {"\u062e\u0627\u0646\u0647"}
                </div>
              </PlasmicLink__>
            </div>
          </div>
          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__tahC)}>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form),
                  extendedOnValuesChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form", "value"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  formItems: undefined,
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: undefined,
                  onFinish: async values => {
                    const $steps = {};

                    $steps["httpPost"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "oFGo9etX3UbW3vpYoEjNm1",
                              opId: "62f34baf-4f4d-43ae-881d-69a0012b7f34",
                              userArgs: {
                                body: [
                                  $state.form.value.username,

                                  $state.form.value.password
                                ]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["httpPost"] != null &&
                      typeof $steps["httpPost"] === "object" &&
                      typeof $steps["httpPost"].then === "function"
                    ) {
                      $steps["httpPost"] = await $steps["httpPost"];
                    }

                    $steps["updateWrongCreds"] =
                      $steps.httpPost.data.response.status == "401"
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["wrongCreds"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateWrongCreds"] != null &&
                      typeof $steps["updateWrongCreds"] === "object" &&
                      typeof $steps["updateWrongCreds"].then === "function"
                    ) {
                      $steps["updateWrongCreds"] = await $steps[
                        "updateWrongCreds"
                      ];
                    }

                    $steps["updateToken"] =
                      $steps.httpPost.data.response.status == "200"
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["token"]
                              },
                              operation: 0,
                              value: $steps.httpPost.data.response.token
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateToken"] != null &&
                      typeof $steps["updateToken"] === "object" &&
                      typeof $steps["updateToken"].then === "function"
                    ) {
                      $steps["updateToken"] = await $steps["updateToken"];
                    }

                    $steps["runCode"] =
                      $steps.httpPost.data.response.status == "200"
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return localStorage.setItem(
                                  "token",
                                  $state.token
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["goToStudPanel"] =
                      $steps.httpPost.data.response.status == "200" &&
                      $steps.httpPost.data.response.role == "student"
                        ? (() => {
                            const actionArgs = { destination: `/spanel` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["goToStudPanel"] != null &&
                      typeof $steps["goToStudPanel"] === "object" &&
                      typeof $steps["goToStudPanel"].then === "function"
                    ) {
                      $steps["goToStudPanel"] = await $steps["goToStudPanel"];
                    }
                  },
                  onIsSubmittingChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["form", "isSubmitting"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  ref: ref => {
                    $refs["form"] = ref;
                  },
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "form.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__nTmf
                      )}
                      label={
                        "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc"
                      }
                      name={"username"}
                      rules={[{ ruleType: "required" }]}
                    >
                      <AntdInput
                        className={classNames(
                          "__wab_instance",
                          sty.input__jmtT3
                        )}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField___8LNz4
                      )}
                      label={"\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"}
                      name={"password"}
                      rules={[{ ruleType: "required" }]}
                    >
                      <AntdPassword
                        className={classNames(
                          "__wab_instance",
                          sty.passwordInput__aZh9G
                        )}
                      />
                    </FormItemWrapper>
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__zvYxm
                      )}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mhMjT
                        )}
                      >
                        {"\u0648\u0631\u0648\u062f"}
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })()}
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form2),
                  extendedOnValuesChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form2", "value"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  formItems: undefined,
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: undefined,
                  onFinish: async values => {
                    const $steps = {};

                    $steps["httpPost"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8nstudent.dotavvab.com/webhook/alandlogin",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    username: $state.form2.value.username,
                                    password: $state.form2.value.password
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["httpPost"] != null &&
                      typeof $steps["httpPost"] === "object" &&
                      typeof $steps["httpPost"].then === "function"
                    ) {
                      $steps["httpPost"] = await $steps["httpPost"];
                    }

                    $steps["updateWrongCreds"] =
                      $steps.httpPost.status == "401"
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["wrongCreds"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateWrongCreds"] != null &&
                      typeof $steps["updateWrongCreds"] === "object" &&
                      typeof $steps["updateWrongCreds"].then === "function"
                    ) {
                      $steps["updateWrongCreds"] = await $steps[
                        "updateWrongCreds"
                      ];
                    }

                    $steps["updateToken"] =
                      $steps.httpPost.status == "200"
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["token"]
                              },
                              operation: 0,
                              value: $steps.httpPost.data.token
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateToken"] != null &&
                      typeof $steps["updateToken"] === "object" &&
                      typeof $steps["updateToken"].then === "function"
                    ) {
                      $steps["updateToken"] = await $steps["updateToken"];
                    }

                    $steps["runCode"] =
                      $steps.httpPost.status == "200"
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return localStorage.setItem(
                                  "token",
                                  $state.token
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["goToStudPanel"] =
                      $steps.httpPost.status == "200" &&
                      $steps.httpPost.data.role == "student"
                        ? (() => {
                            const actionArgs = { destination: `/spanel` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["goToStudPanel"] != null &&
                      typeof $steps["goToStudPanel"] === "object" &&
                      typeof $steps["goToStudPanel"].then === "function"
                    ) {
                      $steps["goToStudPanel"] = await $steps["goToStudPanel"];
                    }
                  },
                  onIsSubmittingChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["form2", "isSubmitting"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  ref: ref => {
                    $refs["form2"] = ref;
                  },
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form2.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "form2.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"form2"}
                    data-plasmic-override={overrides.form2}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__jhh8
                      )}
                      label={
                        "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc"
                      }
                      name={"username"}
                      rules={[{ ruleType: "required" }]}
                    >
                      <AntdInput
                        className={classNames(
                          "__wab_instance",
                          sty.input___3703
                        )}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__tjXWz
                      )}
                      label={"\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"}
                      name={"password"}
                      rules={[{ ruleType: "required" }]}
                    >
                      <AntdPassword
                        className={classNames(
                          "__wab_instance",
                          sty.passwordInput___8Fan7
                        )}
                      />
                    </FormItemWrapper>
                    <AntdButton
                      className={classNames("__wab_instance", sty.button__yy7Q)}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__txoYn
                        )}
                      >
                        {"\u0648\u0631\u0648\u062f"}
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })()}
            </div>
            <div className={classNames(projectcss.all, sty.column__agGmd)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__e3Xwc)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/copy_of_copy_of_aland_class/images/svg1Svg.svg",
                  fullWidth: 375,
                  fullHeight: 375,
                  aspectRatio: 1
                }}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__wmz6M)}>
            {(() => {
              try {
                return $state.wrongCreds;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___54Joj
                )}
              >
                {
                  "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc \u06cc\u0627 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0627\u0634\u062a\u0628\u0627\u0647"
                }
              </div>
            ) : null}
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navigationBar", "columns", "form", "form2", "footer"],
  navigationBar: ["navigationBar"],
  columns: ["columns", "form", "form2"],
  form: ["form"],
  form2: ["form2"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  columns: "div";
  form: typeof FormWrapper;
  form2: typeof FormWrapper;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogin__VariantsArgs;
    args?: PlasmicLogin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLogin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLogin__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLogin__ArgProps,
          internalVariantPropNames: PlasmicLogin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogin";
  } else {
    func.displayName = `PlasmicLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicLogin = Object.assign(
  // Top-level PlasmicLogin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    columns: makeNodeComponent("columns"),
    form: makeNodeComponent("form"),
    form2: makeNodeComponent("form2"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicLogin
    internalVariantProps: PlasmicLogin__VariantProps,
    internalArgProps: PlasmicLogin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLogin;
/* prettier-ignore-end */
