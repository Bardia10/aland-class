/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mJqpyqbUtzd2VoHjhzzUXf
// Component: -dz9eTlPfUTl

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: mJqpyqbUtzd2VoHjhzzUXf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: mJqpyqbUtzd2VoHjhzzUXf/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: mJqpyqbUtzd2VoHjhzzUXf/projectcss
import sty from "./PlasmicNotificationsChat.module.css"; // plasmic-import: -dz9eTlPfUTl/css

import ChevronDownSvgIcon from "./icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: bzrZ5Muri71Z/icon

createPlasmicElementProxy;

export type PlasmicNotificationsChat__VariantMembers = {};
export type PlasmicNotificationsChat__VariantsArgs = {};
type VariantPropType = keyof PlasmicNotificationsChat__VariantsArgs;
export const PlasmicNotificationsChat__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNotificationsChat__ArgsType = {
  messages3?: any;
  onMessages3Change?: (val: string) => void;
  notifications?: any;
};
type ArgPropType = keyof PlasmicNotificationsChat__ArgsType;
export const PlasmicNotificationsChat__ArgProps = new Array<ArgPropType>(
  "messages3",
  "onMessages3Change",
  "notifications"
);

export type PlasmicNotificationsChat__OverridesType = {
  root?: Flex__<"div">;
  dayMessages2?: Flex__<"div">;
  messages2?: Flex__<"div">;
  dayMessages4?: Flex__<"div">;
  messages5?: Flex__<"div">;
  dayMessages3?: Flex__<"div">;
  messages4?: Flex__<"div">;
};

export interface DefaultNotificationsChatProps {
  messages3?: any;
  onMessages3Change?: (val: string) => void;
  notifications?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNotificationsChat__RenderFunc(props: {
  variants: PlasmicNotificationsChat__VariantsArgs;
  args: PlasmicNotificationsChat__ArgsType;
  overrides: PlasmicNotificationsChat__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "messages3",
        type: "writable",
        variableType: "object",

        valueProp: "messages3",
        onChangeProp: "onMessages3Change"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        sty.root
      )}
    >
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return Object.values($props.notifications.messages.old);
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <div
            data-plasmic-name={"dayMessages2"}
            data-plasmic-override={overrides.dayMessages2}
            className={classNames(projectcss.all, sty.dayMessages2)}
            key={currentIndex}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lR6Kc
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      let months = {
                        "1": "فروردین",
                        "2": "اردیبهشت",
                        "3": "خرداد",
                        "4": "تیر",
                        "5": "مرداد",
                        "6": "شهریور",
                        "7": "مهر",
                        "8": "آبان",
                        "9": "آذر",
                        "10": "دی",
                        "11": "بهمن",
                        "12": "اسفند"
                      };
                      return (
                        months[currentItem[0].month] + " " + currentItem[0].day
                      );
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return currentItem;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_1, __plasmic_idx_1) => {
              const currentItem = __plasmic_item_1;
              const currentIndex = __plasmic_idx_1;
              return (
                <div
                  data-plasmic-name={"messages2"}
                  data-plasmic-override={overrides.messages2}
                  className={classNames(projectcss.all, sty.messages2)}
                  key={currentIndex}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__x5DMt)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ebUIx)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4XrEz
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "You can insert dialog body content here in this slot.";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__chsgI
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.text;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "You can insert dialog body content here in this slot.";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pLmel
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eiekL
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.time;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "22:44";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__ofeN4)}
                      displayHeight={"54px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"54px"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return currentItem.profile;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {
                              src: "/plasmic/copy_of_copy_of_aland_class/images/shannon160X160CircleJpg.jpg",
                              fullWidth: 160,
                              fullHeight: 160,
                              aspectRatio: undefined
                            };
                          }
                          throw e;
                        }
                      })()}
                      title={(() => {
                        try {
                          return (
                            currentItem["first name"] +
                            " " +
                            currentItem["last name"]
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                </div>
              );
            })}
          </div>
        );
      })}
      <div className={classNames(projectcss.all, sty.freeBox__o1U6D)}>
        <div className={classNames(projectcss.all, sty.freeBox__ree4K)}>
          <ChevronDownSvgIcon
            className={classNames(projectcss.all, sty.svg__zlul2)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__a7HyZ
            )}
          >
            {
              "\u067e\u06cc\u0627\u0645 \u0647\u0627\u06cc \u062c\u062f\u06cc\u062f"
            }
          </div>
        </div>
      </div>
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return Object.values($props.notifications.messages.new);
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <div
            data-plasmic-name={"dayMessages4"}
            data-plasmic-override={overrides.dayMessages4}
            className={classNames(projectcss.all, sty.dayMessages4)}
            key={currentIndex}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9Pw5O
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      let months = {
                        "1": "فروردین",
                        "2": "اردیبهشت",
                        "3": "خرداد",
                        "4": "تیر",
                        "5": "مرداد",
                        "6": "شهریور",
                        "7": "مهر",
                        "8": "آبان",
                        "9": "آذر",
                        "10": "دی",
                        "11": "بهمن",
                        "12": "اسفند"
                      };
                      return (
                        months[currentItem[0].month] + " " + currentItem[0].day
                      );
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return currentItem;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_1, __plasmic_idx_1) => {
              const currentItem = __plasmic_item_1;
              const currentIndex = __plasmic_idx_1;
              return (
                <div
                  data-plasmic-name={"messages5"}
                  data-plasmic-override={overrides.messages5}
                  className={classNames(projectcss.all, sty.messages5)}
                  key={currentIndex}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tay5)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rFiQc)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fiWz9
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "You can insert dialog body content here in this slot.";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nPaCr
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.text;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "You can insert dialog body content here in this slot.";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__v94Uj
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kxrS6
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.time;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "22:44";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__a3IkV)}
                      displayHeight={"54px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"54px"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return currentItem.profile;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {
                              src: "/plasmic/copy_of_copy_of_aland_class/images/shannon160X160CircleJpg.jpg",
                              fullWidth: 160,
                              fullHeight: 160,
                              aspectRatio: undefined
                            };
                          }
                          throw e;
                        }
                      })()}
                      title={(() => {
                        try {
                          return (
                            currentItem["first name"] +
                            " " +
                            currentItem["last name"]
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                </div>
              );
            })}
          </div>
        );
      })}
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return Object.values($state.messages3.new);
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <div
            data-plasmic-name={"dayMessages3"}
            data-plasmic-override={overrides.dayMessages3}
            className={classNames(projectcss.all, sty.dayMessages3)}
            key={currentIndex}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1IoR3
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return currentItem[0].date;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return currentItem;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_1, __plasmic_idx_1) => {
              const currentItem = __plasmic_item_1;
              const currentIndex = __plasmic_idx_1;
              return (
                <div
                  data-plasmic-name={"messages4"}
                  data-plasmic-override={overrides.messages4}
                  className={classNames(projectcss.all, sty.messages4)}
                  key={currentIndex}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nN5Nk)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tcOdJ)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4JK7
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "You can insert dialog body content here in this slot.";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4V6LU
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.text;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "You can insert dialog body content here in this slot.";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pyMrh
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fkzGk
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.time;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "22:44";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__xklQr)}
                      displayHeight={"54px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"54px"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return currentItem.from.image;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {
                              src: "/plasmic/copy_of_copy_of_aland_class/images/shannon160X160CircleJpg.jpg",
                              fullWidth: 160,
                              fullHeight: 160,
                              aspectRatio: undefined
                            };
                          }
                          throw e;
                        }
                      })()}
                      title={(() => {
                        try {
                          return currentItem.from.name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                </div>
              );
            })}
          </div>
        );
      })}
      <div className={classNames(projectcss.all, sty.freeBox__rbVoB)}>
        <ChevronDownSvgIcon
          className={classNames(projectcss.all, sty.svg___5RPc3)}
          role={"img"}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "dayMessages2",
    "messages2",
    "dayMessages4",
    "messages5",
    "dayMessages3",
    "messages4"
  ],
  dayMessages2: ["dayMessages2", "messages2"],
  messages2: ["messages2"],
  dayMessages4: ["dayMessages4", "messages5"],
  messages5: ["messages5"],
  dayMessages3: ["dayMessages3", "messages4"],
  messages4: ["messages4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dayMessages2: "div";
  messages2: "div";
  dayMessages4: "div";
  messages5: "div";
  dayMessages3: "div";
  messages4: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNotificationsChat__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNotificationsChat__VariantsArgs;
    args?: PlasmicNotificationsChat__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNotificationsChat__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNotificationsChat__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNotificationsChat__ArgProps,
          internalVariantPropNames: PlasmicNotificationsChat__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNotificationsChat__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNotificationsChat";
  } else {
    func.displayName = `PlasmicNotificationsChat.${nodeName}`;
  }
  return func;
}

export const PlasmicNotificationsChat = Object.assign(
  // Top-level PlasmicNotificationsChat renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dayMessages2: makeNodeComponent("dayMessages2"),
    messages2: makeNodeComponent("messages2"),
    dayMessages4: makeNodeComponent("dayMessages4"),
    messages5: makeNodeComponent("messages5"),
    dayMessages3: makeNodeComponent("dayMessages3"),
    messages4: makeNodeComponent("messages4"),

    // Metadata about props expected for PlasmicNotificationsChat
    internalVariantProps: PlasmicNotificationsChat__VariantProps,
    internalArgProps: PlasmicNotificationsChat__ArgProps
  }
);

export default PlasmicNotificationsChat;
/* prettier-ignore-end */
